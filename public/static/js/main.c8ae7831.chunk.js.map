{"version":3,"sources":["logo.svg","components/LaunchItem.js","components/Pagination.js","components/Launches.js","components/RocketItem.js","components/Rockets.js","components/Launch.js","components/Rocket.js","components/MissionKey.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","react_router_dom","to","concat","Pagination","itemsPerPage","totalItems","paginate","pageNumbers","i","Math","ceil","push","map","number","key","onClick","LAUNCHES_QUERY","gql","_templateObject","Launches","_useState","useState","_useState2","Object","slicedToArray","currentPage","setCurrentPage","_useState3","_useState4","setItemsPerPage","indexOfLastItem","indexOfFirstItem","pageNumber","useEffect","console","log","react","type","value","placeholder","onChange","event","target","react_apollo_esm","query","loading","error","data","currentLauches","launches","slice","LaunchItem_LaunchItem","Pagination_Pagination","length","RocketItem","_ref$rocket","rocket","rocket_id","rocket_name","ROCTETS_QUERY","Rockets_templateObject","Rockets","rockets","RocketItem_RocketItem","LAUNCH_QUERY","Launch_templateObject","Launch","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket_type","ROCKET_QUERY","Rocket_templateObject","Rocket","_data$rocket","wikipedia","href","MissionKey","style","position","top","Navigation","client","ApolloClient","uri","App","display","alignItems","justifyContent","src","logo","alt","width","margin","Navigation_Navigation","MissionKey_MissionKey","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8ae7831.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4fe0a39d.svg\";","import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport const LaunchItem = ({\n    launch: { flight_number, mission_name, launch_date_local, launch_success },\n}) => {\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>\n                        Mission name:{' '}\n                        <span\n                            className={classNames({\n                                'text-success': launch_success,\n                                'text-danger': !launch_success,\n                            })}\n                        >\n                            {mission_name}\n                        </span>{' '}\n                    </h4>\n                    <p>\n                        Date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment>\n                    </p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">\n                        Launch Details\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default LaunchItem;\n","import React from 'react';\n\nexport const Pagination = ({ itemsPerPage, totalItems, paginate }) => {\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(totalItems / itemsPerPage); i++) {\n        pageNumbers.push(i);\n    }\n\n    return (\n        <nav>\n            <ul className=\"pagination\">\n                {pageNumbers.map(number => (\n                    <li key={number} className=\"page-item\">\n                        <button onClick={() => paginate(number)} className=\"page-link\">\n                            {number}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n};\n\nexport default Pagination;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { LaunchItem } from './LaunchItem';\nimport { Pagination } from './Pagination';\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery {\n        launches {\n            flight_number\n            mission_name\n            launch_date_local\n            launch_success\n        }\n    }\n`;\n\nexport const Launches = () => {\n    const [currentPage, setCurrentPage] = useState(1);\n    const [itemsPerPage, setItemsPerPage] = useState(5);\n\n    const indexOfLastItem = currentPage * itemsPerPage;\n    const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n\n    // Change page\n    const paginate = pageNumber => setCurrentPage(pageNumber);\n\n    useEffect(() => {\n        console.log('component reloaded');\n    });\n\n    return (\n        <Fragment>\n            <div className=\"card card-header mb-3\">\n                <h1>Launches</h1>\n            </div>\n            <input\n                type=\"text\"\n                value={itemsPerPage}\n                placeholder=\"Items per page\"\n                onChange={event => setItemsPerPage(event.target.value)}\n            />\n\n            <Query query={LAUNCHES_QUERY}>\n                {({ loading, error, data }) => {\n                    if (loading) return <h4>Loading...</h4>;\n                    if (error) console.log(error);\n\n                    // Get current lunches\n                    const currentLauches = data.launches.slice(indexOfFirstItem, indexOfLastItem);\n\n                    return (\n                        <Fragment>\n                            {currentLauches.map(launch => (\n                                <LaunchItem key={launch.flight_number} launch={launch} />\n                            ))}\n                            <Pagination\n                                itemsPerPage={itemsPerPage}\n                                totalItems={data.launches.length}\n                                paginate={paginate}\n                            />\n                        </Fragment>\n                    );\n                }}\n            </Query>\n        </Fragment>\n    );\n};\n\nexport default Launches;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const RocketItem = ({ rocket: { rocket_id, rocket_name } }) => {\n    return (\n        <div className=\"card card-body mb-3\" key={rocket_id}>\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>{rocket_name}</h4>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/rocket/${rocket_id}`} className=\"btn btn-secondary\">\n                        Rocket Details\n                    </Link>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default RocketItem;\n","import React, { Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { RocketItem } from './RocketItem';\n\nconst ROCTETS_QUERY = gql`\n    {\n        rockets {\n            rocket_id\n            rocket_name\n            rocket_type\n            wikipedia\n        }\n    }\n`;\n\nexport const Rockets = () => {\n    return (\n        <Fragment>\n            <div className=\"card card-header mb-3\">\n                <h1>Rockets</h1>\n            </div>\n            <Query query={ROCTETS_QUERY}>\n                {({ loading, error, data }) => {\n                    if (loading) return <h4>Loading...</h4>;\n                    if (error) console.log(error);\n\n                    return (\n                        <Fragment>\n                            {data.rockets.map(rocket => (\n                                <RocketItem key={rocket.rocket_id} rocket={rocket} />\n                            ))}\n                        </Fragment>\n                    );\n                }}\n            </Query>\n        </Fragment>\n    );\n};\n\nexport default Rockets;\n","import React, { Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n    query LaunchQuery($flight_number: Int!) {\n        launch(flight_number: $flight_number) {\n            flight_number\n            mission_name\n            launch_year\n            launch_success\n            launch_date_local\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport const Launch = props => {\n    let { flight_number } = props.match.params;\n    flight_number = parseInt(flight_number, 10);\n    return (\n        <Fragment>\n            <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n                {({ loading, error, data }) => {\n                    if (loading) return <h4>Loading...</h4>;\n                    if (error) console.log(error);\n\n                    const {\n                        mission_name,\n                        launch_year,\n                        launch_success,\n                        rocket: { rocket_id, rocket_name, rocket_type },\n                    } = data.launch;\n\n                    return (\n                        <div>\n                            <h1 className=\"display-4 my-3\">\n                                <span className=\"text-dark\">Misson name: </span>\n                                {mission_name}\n                            </h1>\n                            <h4 className=\"mb-3\">Launch Details</h4>\n                            <ul className=\"list-group\">\n                                <li className=\"list-group-item\">Flight Number: {flight_number}</li>\n                                <li className=\"list-group-item\">Launch Year: {launch_year}</li>\n                                <li className=\"list-group-item\">\n                                    Launch Successful:{' '}\n                                    <span\n                                        className={classNames({\n                                            'text-success': launch_success,\n                                            'text-danger': !launch_success,\n                                        })}\n                                    >\n                                        {launch_success ? 'Yes' : 'No'}\n                                    </span>\n                                </li>\n                            </ul>\n\n                            <h4 className=\"my-3\">Rocket Details</h4>\n                            <ul className=\"list-group\">\n                                <li className=\"list-group-item\">Rocket Id: {rocket_id}</li>\n                                <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\n                                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                            </ul>\n                            <Link to=\"/launches\" className=\"btn btn-secondary mt-3\">\n                                Back\n                            </Link>\n                        </div>\n                    );\n                }}\n            </Query>\n        </Fragment>\n    );\n};\n\nexport default Launch;\n","import React, { Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\n\nconst ROCKET_QUERY = gql`\n    query RocketQuery($rocket_id: String!) {\n        rocket(rocket_id: $rocket_id) {\n            rocket_id\n            rocket_name\n            rocket_type\n            wikipedia\n        }\n    }\n`;\n\nexport const Rocket = props => {\n    const { rocket_id } = props.match.params;\n\n    return (\n        <Fragment>\n            <Query query={ROCKET_QUERY} variables={{ rocket_id }}>\n                {({ loading, error, data }) => {\n                    if (loading) return <h4>Loading...</h4>;\n                    if (error) console.log(error);\n                    const { rocket_name, rocket_type, wikipedia } = data.rocket;\n\n                    return (\n                        <div>\n                            <h1 className=\"display-4 my-3\">\n                                <span className=\"text-dark\">Rocket name: </span>\n                                {rocket_name}\n                            </h1>\n                            <ul className=\"list-group\">\n                                <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                                <li className=\"list-group-item\">\n                                    <a href={wikipedia}>Wikipedia link</a>\n                                </li>\n                            </ul>\n                            <Link to=\"/rockets\" className=\"btn btn-secondary mt-3\">\n                                Back\n                            </Link>\n                        </div>\n                    );\n                }}\n            </Query>\n        </Fragment>\n    );\n};\n\nexport default Rocket;\n","import React from 'react';\n\nexport const MissionKey = () => {\n    return (\n        <div className=\"my-3\" style={{ position: 'sticky', top: 50 }}>\n            <p>\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\" /> = Failed\n            </p>\n        </div>\n    );\n};\nexport default MissionKey;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Navigation = () => {\n    return (\n        <div>\n            <Link to=\"/rockets\" className=\"btn btn-primary mr-3\">\n                Rockets\n            </Link>\n            <Link to=\"/launches\" className=\"btn btn-primary\">\n                Launches\n            </Link>\n        </div>\n    );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport logo from './logo.svg';\nimport { Launches } from './components/Launches';\nimport { Rockets } from './components/Rockets';\nimport { Launch } from './components/Launch';\nimport { Rocket } from './components/Rocket';\nimport { MissionKey } from './components/MissionKey';\nimport { Navigation } from './components/Navigation';\n\nconst client = new ApolloClient({\n    uri: '/graphql',\n});\n\nconst App = () => {\n    return (\n        <ApolloProvider client={client}>\n            <Router>\n                <header\n                    className=\"container\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        justifyContent: 'space-between',\n                    }}\n                >\n                    <Link to=\"/\">\n                        <img src={logo} alt=\"SpeceX\" style={{ width: '400px', margin: '20px 0' }} />\n                    </Link>\n                    <Navigation />\n                </header>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-2\">\n                            <MissionKey />\n                        </div>\n                        <div className=\"col-md-10\">\n                            <Route exact path=\"/launches\" component={Launches} />\n                            <Route exact path=\"/rockets\" component={Rockets} />\n                            <Route exact path=\"/launch/:flight_number\" component={Launch} />\n                            <Route exact path=\"/rocket/:rocket_id\" component={Rocket} />\n                        </div>\n                    </div>\n                </div>\n            </Router>\n        </ApolloProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}